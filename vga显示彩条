`timescale 1ns / 1ps
module VGA_top(
input clock, //系统时钟 100MHZ
input rst, //时钟复位端
input [1:0] switch, //显示模式选择
output [2:0] disp_RGB, // VGA 数据输出
output hsync, // VGA 行同步信号
output vsync // VGA 场同步信号
);
wire clock, rst;
wire hsync,vsync;
reg[9:0] hcount; // 行扫描计数器
reg[9:0] vcount; // 场扫描计数器
reg [2:0] data; //数据端
reg [2:0] h_data; //横彩条
reg [2:0] v_data; //竖彩条
wire vga_clk;
wire hcount_ov; //行扫描结束标志位
wire vcount_ov; //帧扫描结束标志位
wire data_act; //显示阶段 data 有效
//VGA 行、场扫描时序参数表
parameter hsync_end = 10'd95, //行同步信号（低电平）结束
hdata_begin = 10'd143, //行显示开始
hdata_end = 10'd783, //行显示结束
hpixel_end = 10'd799, //行显示前延结束
vsync_end = 10'd1, vdata_begin = 10'd34, vdata_end = 10'd514, vline_end =10'd524;
clk_unit myclk( .clock(clock),
.rst(rst),
.vga_clk(vga_clk)
);
//VGA 驱动程序
//行扫描
always@(posedge vga_clk)
begin
if(hcount_ov) //若行扫描标志位为 1，换行
hcount<=10'd0; //行扫描计数器置 0
else
hcount<= hcount +10'd1; //行扫描计数器+1
end
assign hcount_ov = (hcount == hpixel_end); //行计数器=799，扫描一行结束，
//场扫描
always@(posedge vga_clk)
begin
if(hcount_ov) //行扫描标志位有效
begin
if(vcount_ov) //帧扫描标志位有效，场扫描计数器置零，重新计数
vcount<=10'd0;
else
vcount<= vcount +10'd1; //场扫描计数器加 1
end
end
assign vcount_ov = (vcount == vline_end); //场计数器=524，一帧显示结束，给
//数据、同步信号输出
assign data_act = ((hcount>=hdata_begin) &&
(hcount<hdata_end))&&
((vcount>=vdata_begin)&& (vcount<vdata_end)); //显示阶
assign hsync = (hcount > hsync_end);//行计数器大于 95，行同步信号置 1
assign vsync = (vcount > vsync_end); //场计数器大于 1，场同步信号置 1
assign disp_RGB = (data_act) ? data : 3'b000;//显示阶段，输出数据，否则输8
always@(posedge vga_clk)
begin
case(switch[1:0])
2'd0: data<=h_data; //选择横彩条
2'd1: data<=v_data; //选择竖彩条
2'd2: data<=(v_data ^ h_data); //产生棋格
2'd3: data<=(v_data ~^ h_data); //产生棋格
endcase
end
always@(posedge vga_clk) //产生竖彩条
begin
if(hcount <233)
v_data<=3'h7;
else if(hcount <303)
v_data<=3'h6;
else if(hcount <383)
v_data<=3'h5;
else if(hcount <463)
v_data<=3'h4;
else if(hcount <543)
v_data<=3'h3;
else if(hcount <623)
v_data<=3'h2;
else if(hcount <703)
v_data<=3'h1;
else
v_data<=3'h0;
end
always@(posedge vga_clk) //产生横彩条
begin
if(vcount <94)
h_data<=3'h7;
else if(vcount <154)
h_data<=3'h6;
else if(vcount <214)
h_data<=3'h5;
else if(vcount <274)
h_data<=3'h4;
else if(vcount <334)
h_data<=3'h3;
else if(vcount <394)
h_data<=3'h2;
else if(vcount <454)
h_data<=3'h1;
else
h_data<=3'h0;
end
endmodule



`timescale 1ns / 1ps
module clk_unit(
input clock,
input rst, output vga_clk
);
reg vga_clk;
reg clk_tmp;
always @(posedge clk_tmp or posedge rst) begin
if (rst)
vga_clk <= 0;
else
vga_clk <= ~vga_clk;
end
always @(posedge clock or posedge rst) begin
if (rst)
clk_tmp <= 0;
else
clk_tmp <= ~clk_tmp;
end
endmodule
